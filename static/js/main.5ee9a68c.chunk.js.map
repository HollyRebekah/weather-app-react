{"version":3,"sources":["components/location-details.jsx","components/forecast-summary.jsx","components/forecast-summaries.jsx","components/forecast-details.jsx","components/search-form.jsx","App.js","serviceWorker.js","index.js"],"names":["LocationDetails","props","id","city","country","ForecastSummary","className","Moment","date","format","name","iconId","icon","temperatureMax","description","onClick","onSelect","ForecastSummaries","forecasts","map","forecast","key","temperature","max","onForecastSelect","ForecastDetails","min","humidity","wind","speed","SearchForm","handleInputChange","bind","handleCityChange","state","searchText","e","charCode","this","setState","target","value","tagName","newCity","handleClick","type","placeholder","onChange","onKeyPress","React","Component","App","selectedDate","location","handleForecastSelect","handleCitySearch","url","fetch","then","response","json","data","getData","selectedForecast","find","handleKeyPress","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAUeA,EAPS,SAAAC,GAAK,OAAI,wBAAIC,GAAG,oBAAoBD,EAAME,KAAjC,KAAyCF,EAAMG,U,iCCyBjEC,EAvBS,SAAAJ,GACtB,OACE,6BACE,0BAAMK,UAAU,QAAQC,IAAON,EAAMO,MAAMC,OAAO,eADpD,IAEE,yBAAKH,UAAU,QACb,kBAAC,IAAD,CAAaI,KAAK,MAAMC,OAAQV,EAAMW,QAExC,0BAAMN,UAAU,eAAeL,EAAMY,eAArC,SACA,6BACA,0BAAMP,UAAU,eAAeL,EAAMa,aACrC,6BACA,4BAAQR,UAAU,eAAeS,QAAS,kBAAMd,EAAMe,SAASf,EAAMO,QAArE,kBCUSS,G,MArBW,SAAAhB,GAAK,OAC7B,yBAAKK,UAAU,sBAETL,EAAMiB,UAAUC,KAAI,SAAAC,GAAQ,OAC1B,kBAAC,EAAD,CACEC,IAAKD,EAASZ,KACdA,KAAMY,EAASZ,KACfI,KAAMQ,EAASR,KACfC,eAAgBO,EAASE,YAAYC,IACrCT,YAAaM,EAASN,YACtBE,SAAUf,EAAMuB,yBCMbC,G,MAhBS,SAAAxB,GACtB,OACE,yBAAKK,UAAU,oBACb,0BAAMA,UAAU,QAAQC,IAAON,EAAMiB,UAAUV,MAAMC,OAAO,eAC5D,6BACA,0BAAMH,UAAU,kBAAhB,oBAAmDL,EAAMiB,UAAUI,YAAYC,IAA/E,SACA,6BACA,0BAAMjB,UAAU,kBAAhB,oBAAmDL,EAAMiB,UAAUI,YAAYI,IAA/E,SACA,6BACA,0BAAMpB,UAAU,YAAhB,aAAsCL,EAAMiB,UAAUS,SAAtD,KACA,6BACA,0BAAMrB,UAAU,QAAhB,eAAoCL,EAAMiB,UAAUU,KAAKC,MAAzD,UCgCSC,G,kBA5Cb,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KACD8B,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,MAAQ,CACXC,WAAY,IALG,E,+EASDC,GACG,KAAfA,EAAEC,UACJC,KAAKC,SAAS,CAAEJ,WAAYC,EAAEI,OAAOC,U,uCAIxBL,GACf,GAAyB,WAArBA,EAAEI,OAAOE,SAAuC,KAAfN,EAAEC,SAAiB,CACtD,IAAMM,EAAUL,KAAKJ,MAAMC,WAC3BG,KAAKrC,MAAM2C,YAAYD,GACvBL,KAAKC,SAAS,CAAEJ,WAAY,Q,+BAK9B,OACE,yBAAK7B,UAAU,UACb,2BACEuC,KAAK,OACLC,YAAY,OACZC,SAAUT,KAAKP,kBACfiB,WAAYV,KAAKL,iBACjBQ,MAAOH,KAAKJ,MAAMC,aAEpB,4BACE7B,UAAU,gBACVuC,KAAK,SACL9B,QAASuB,KAAKL,kBAHhB,e,GAlCiBgB,IAAMC,YCqEhBC,E,YAhEb,WAAYlD,GAAQ,IAAD,8BACjB,4CAAMA,KACDiC,MAAQ,CACXkB,aAAc,EACdlC,UAAW,GACXmC,SAAU,CACRlD,KAAM,GACNC,QAAS,KAGb,EAAKkD,qBAAuB,EAAKA,qBAAqBtB,KAA1B,gBAC5B,EAAKuB,iBAAmB,EAAKA,iBAAiBvB,KAAtB,gBAXP,E,kFAcExB,GACnB8B,KAAKC,SAAS,CAAEa,aAAc5C,M,8BAGxBgD,GAAM,IAAD,OACXC,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKtB,SAAS,CAC1Bc,SAAU,CACRlD,KAAM0D,EAAKR,SAASlD,KACpBC,QAASyD,EAAKR,SAASjD,SAEzBc,UAAW2C,EAAK3C,iB,0CAMpBoB,KAAKwB,QADO,kE,uCAIG3D,GACf,IACMqD,EAAG,gEADOrD,GAEhBmC,KAAKwB,QAAQN,K,+BAGL,IAAD,OACDO,EAAmBzB,KAAKJ,MAAMhB,UAAU8C,MAAK,SAAA5C,GAAQ,OAAIA,EAASZ,OAAS,EAAK0B,MAAMkB,gBAC5F,OACE,yBAAK9C,UAAU,YACb,kBAAC,EAAD,CACEH,KAAMmC,KAAKJ,MAAMmB,SAASlD,KAC1BC,QAASkC,KAAKJ,MAAMmB,SAASjD,UAE/B,kBAAC,EAAD,CACEwC,YAAaN,KAAKiB,iBAClBU,eAAgB3B,KAAKiB,mBAEvB,kBAAC,EAAD,CAAmBrC,UAAWoB,KAAKJ,MAAMhB,UAAWM,iBAAkBc,KAAKgB,uBAG3ES,GAAoB,kBAAC,EAAD,CAAiB7C,UAAW6C,S,GAzDtCd,IAAMC,WCKJgB,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.5ee9a68c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationDetails = props => <h1 id=\"location-details\">{props.city}, {props.country}</h1>;\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\nexport default LocationDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherIcon from 'react-icons-weather';\nimport Moment from 'moment';\n\nconst ForecastSummary = props => {\n  return (\n    <div>\n      <span className=\"date\">{Moment(props.date).format('ddd Do MMM')}</span>;\n      <div className=\"icon\">\n        <WeatherIcon name=\"owm\" iconId={props.icon} />\n      </div>\n      <span className=\"temperature\">{props.temperatureMax}°c</span>\n      <br />\n      <span className=\"description\">{props.description}</span>\n      <br />\n      <button className=\"more-details\" onClick={() => props.onSelect(props.date)}>More details</button>\n    </div>\n  );\n};\n\nForecastSummary.propTypes = {\n  date: PropTypes.number.isRequired,\n  temperatureMax: PropTypes.number.isRequired,\n  description: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default ForecastSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ForecastSummary from './forecast-summary';\nimport '../styles/forecast-summaries.scss';\n\nconst ForecastSummaries = props => (\n  <div className=\"forecast-summaries\">\n    {\n        props.forecasts.map(forecast => (\n          <ForecastSummary\n            key={forecast.date}\n            date={forecast.date}\n            icon={forecast.icon}\n            temperatureMax={forecast.temperature.max}\n            description={forecast.description}\n            onSelect={props.onForecastSelect}\n          />\n        ))\n        }\n  </div>\n);\n\nForecastSummaries.propTypes = {\n  forecasts: PropTypes.array.isRequired,\n};\n\nexport default ForecastSummaries;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Moment from 'moment';\nimport '../styles/forecast-details.scss'\n\nconst ForecastDetails = props => {\n  return (\n    <div className=\"forecast-details\">\n      <span className=\"date\">{Moment(props.forecasts.date).format('ddd Do MMM')}</span>\n      <br />\n      <span className=\"temperatureMax\">Max Temperature: {props.forecasts.temperature.max}°c</span>\n      <br />\n      <span className=\"temperatureMin\">Min Temperature: {props.forecasts.temperature.min}°c</span>\n      <br />\n      <span className=\"humidity\">Humidity: {props.forecasts.humidity}%</span>\n      <br />\n      <span className=\"wind\">Wind Speed: {props.forecasts.wind.speed}mph</span>\n    </div>\n  );\n};\n\nexport default ForecastDetails;\n","import React from 'react';\nimport '../styles/search-form.scss';\n\nclass SearchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.state = {\n      searchText: '',\n    };\n  }\n\n  handleInputChange(e) {\n    if (e.charCode !== 13) {\n      this.setState({ searchText: e.target.value });\n    }\n  }\n\n  handleCityChange(e) {\n    if (e.target.tagName === 'BUTTON' || e.charCode === 13) {\n      const newCity = this.state.searchText;\n      this.props.handleClick(newCity);\n      this.setState({ searchText: '' });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"search\">\n        <input\n          type=\"text\"\n          placeholder=\"City\"\n          onChange={this.handleInputChange}\n          onKeyPress={this.handleCityChange}\n          value={this.state.searchText}\n        />\n        <button\n          className=\"search-button\"\n          type=\"button\" \n          onClick={this.handleCityChange}\n        >\n        Search\n        </button>\n      </div>\n    );\n  }\n}\nexport default SearchForm;\n","import React from 'react';\nimport LocationDetails from './components/location-details';\nimport ForecastSummaries from './components/forecast-summaries'\nimport ForecastDetails from './components/forecast-details';\nimport './styles/app.scss';\nimport SearchForm from './components/search-form';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedDate: 0,\n      forecasts: [],\n      location: {\n        city: '',\n        country: '',\n      },\n    };\n    this.handleForecastSelect = this.handleForecastSelect.bind(this);\n    this.handleCitySearch = this.handleCitySearch.bind(this);\n  }\n\n  handleForecastSelect(date) {\n    this.setState({ selectedDate: date });\n  }\n\n  getData(url) {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({\n        location: {\n          city: data.location.city,\n          country: data.location.country,\n        },\n        forecasts: data.forecasts,\n      }));\n  }\n\n  componentDidMount() {\n    const url = 'https://mcr-codes-weather.herokuapp.com/forecast?city=London';\n    this.getData(url);\n  }\n\n  handleCitySearch(city) {\n    const newCity = city;\n    const url = `https://mcr-codes-weather.herokuapp.com/forecast?city=${newCity}`;\n    this.getData(url);\n  }\n\n  render() {\n    const selectedForecast = this.state.forecasts.find(forecast => forecast.date === this.state.selectedDate);\n    return (\n      <div className=\"forecast\">\n        <LocationDetails\n          city={this.state.location.city}\n          country={this.state.location.country}\n        />\n        <SearchForm\n          handleClick={this.handleCitySearch}\n          handleKeyPress={this.handleCitySearch}\n        />\n        <ForecastSummaries forecasts={this.state.forecasts} onForecastSelect={this.handleForecastSelect} />\n\n        {\n        selectedForecast && <ForecastDetails forecasts={selectedForecast} />\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/app.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}